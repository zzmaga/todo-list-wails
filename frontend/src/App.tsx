import { useEffect, useState } from 'react';
import { useTasks } from './state/useTasks';
import AddTaskForm from './components/AddTaskForm';
import TaskItem from './components/TaskItem';
import Filters from './components/Filters';
import SortBar from './components/SortBar';
import ConfirmDialog from './components/ConfirmDialog';
import './style.css';

export default function App() {
  const {
    tasks,
    loading,
    create,
    toggle,
    remove,
    filter,
    sort,
    setFilter,
    setSort,
    activeCount,
    doneCount
  } = useTasks();

  const [theme, setTheme] = useState<'light' | 'dark'>(
    () => (localStorage.getItem('theme') as 'light' | 'dark') || 'light'
  );
  const [confirm, setConfirm] = useState<{ open: boolean; id?: string }>({ open: false });

  const onDelete = (id: string) => setConfirm({ open: true, id });
  const doDelete = () => {
    if (confirm.id) remove(confirm.id);
    setConfirm({ open: false });
  };

  // –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: —Å–∞–π–¥-—ç—Ñ—Ñ–µ–∫—Ç —á–µ—Ä–µ–∑ useEffect
  useEffect(() => {
    document.documentElement.dataset.theme = theme;
    localStorage.setItem('theme', theme);
  }, [theme]);

  const active = tasks.filter((t) => !t.done);
  const done = tasks.filter((t) => t.done);

  return (
    <div className="container">
      <header>
        <div className="header-left">
          <h1>üìù –ú–æ–∏ –ó–∞–¥–∞—á–∏</h1>
          <div className="app-subtitle">–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ</div>
        </div>
        <div className="spacer" />
        <div className="header-actions">
          <div className="task-stats">
            <span className="stat-item">
              <span className="stat-icon">üìã</span>
              <span className="stat-text">–í—Å–µ–≥–æ: {tasks.length}</span>
            </span>
            <span className="stat-item">
              <span className="stat-icon">‚è≥</span>
              <span className="stat-text">–ê–∫—Ç–∏–≤–Ω—ã—Ö: {activeCount}</span>
            </span>
            <span className="stat-item">
              <span className="stat-icon">‚úÖ</span>
              <span className="stat-text">–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {doneCount}</span>
            </span>
          </div>
          <button 
            className="btn theme-toggle" 
            onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}
            title={`–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ ${theme === 'light' ? '—Ç—ë–º–Ω—É—é' : '—Å–≤–µ—Ç–ª—É—é'} —Ç–µ–º—É`}
          >
            {theme === 'light' ? 'üåô' : '‚òÄÔ∏è'}
          </button>
        </div>
      </header>

      <AddTaskForm onAdd={create} />

      <section className="toolbar">
        <Filters value={filter} onChange={setFilter} />
        <SortBar value={sort} onChange={setSort} />
        <div className="counts">
          –ê–∫—Ç–∏–≤–Ω—ã–µ: {activeCount} ‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ: {doneCount}
        </div>
      </section>

      {loading ? (
        <div>–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</div>
      ) : (
        <div className="columns">
          <div className="task-column">
            <div className="column-header">
              <h2>‚è≥ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏</h2>
              <span className="task-count">{active.length}</span>
            </div>
            {active.length === 0 ? (
              <div className="empty-state">
                <div className="empty-icon">üìù</div>
                <div className="empty-text">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á</div>
                <div className="empty-subtext">–ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É" —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é</div>
              </div>
            ) : (
              <div className="task-list">
                {active.map((t) => (
                  <TaskItem key={t.id} t={t} onToggle={toggle} onDelete={onDelete} />
                ))}
              </div>
            )}
          </div>
          
          <div className="task-column">
            <div className="column-header">
              <h2>‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏</h2>
              <span className="task-count">{done.length}</span>
            </div>
            {done.length === 0 ? (
              <div className="empty-state">
                <div className="empty-icon">üéØ</div>
                <div className="empty-text">–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á</div>
                <div className="empty-subtext">–û—Ç–º–µ—á–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ</div>
              </div>
            ) : (
              <div className="task-list">
                {done.map((t) => (
                  <TaskItem key={t.id} t={t} onToggle={toggle} onDelete={onDelete} />
                ))}
              </div>
            )}
          </div>
        </div>
      )}

      <ConfirmDialog
        open={confirm.open}
        text="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É?"
        onOk={doDelete}
        onCancel={() => setConfirm({ open: false })}
      />
    </div>
  );
}
